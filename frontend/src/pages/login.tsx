import { FormEvent, useEffect, useState, useRef } from "react";
import Head from "next/head";
import useSession, { signIn } from "../utils/hooks/useSession";
import { useRouter } from "next/router";
import Suspend from "../components/utils/Suspend";
import { AuthService, RoomsService } from "../utils/services";

export default function Login() {
  // const { session, loading, error, signIn } = useSession();
  // const { signIn } = useSession();
  const [checkingForRedirect, setCheckingForRedirect] = useState(true);
  // const [email, setEmail] = useState<string>("");
  // const [password, setPassword] = useState<string>("");

  const email = useRef() as React.MutableRefObject<HTMLInputElement>;
  const password = useRef() as React.MutableRefObject<HTMLInputElement>;
  const [token, setToken] = useState<any>();

  const router = useRouter();

  const handleSubmit = async (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault();
    await signIn(email.current.value, password.current.value);

    // console.log(email.current.value);
    // console.log(password.current.value);

    // const res = await fetch(`${AuthService}/login`, {
    //   method: "POST",
    //   credentials: "include",
    //   headers: {
    //     "Content-Type": "application/json",
    //   },
    //   body: JSON.stringify({
    //     email: email.current.value,
    //     password: password.current.value,
    //   }),
    // });

    // setToken(res.headers.get("authorization"));

    // const data = await res.json();
    // console.log(data);
  };

  const handleRoomSubmit = async (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault();

    console.log("got here");
    const res = await fetch(`${RoomsService}/rooms`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Credentials": "true",
        Authorization: token,
      },
      credentials: "include",
      body: JSON.stringify({
        userId: "123456",
        title: "My Room",
        about: "This is my room",
        duration: 15,
        roomType: "poll",
        expired: false,
      }),
    });
    console.log(res);
  };

  // useEffect(() => {
  //   if (session && router.pathname === "/login") {
  //     router.replace("/");
  //   } else {
  //     setCheckingForRedirect(false);
  //   }
  // }, [router, session]);

  return (
    <>
      <Head>
        <title>Lets Think</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Suspend loading={loading || checkingForRedirect}> */}
      <div className="mt-5 flex flex-col items-center justify-center">
        <h1 className="mb-5 text-2xl font-semibold text-white">Login</h1>
        <form className="flex flex-col">
          <label htmlFor="email">
            <p className="text-lg text-white">Email:</p>
          </label>
          <input
            id="email"
            className="text-black"
            ref={email}
            type="text"
            // value={email}
            // onChange={(e) => {
            //   setEmail(e.target.value);
            //   console.log(email);
            // }}
          ></input>
          <label htmlFor="password">
            <p className="text-lg text-white">Password:</p>
          </label>{" "}
          <input
            id="password"
            className="text-black"
            type="text"
            ref={password}
            // value={password}
            // onChange={(e) => {
            //   setPassword(e.target.value);
            // }}
          ></input>
          <button onClick={(e) => handleSubmit(e)} className="mt-5 rounded-xl bg-white p-2 hover:bg-gray-300">
            Login
          </button>
        </form>
        <button onClick={(e) => handleRoomSubmit(e)} className="mt-5 rounded-xl bg-white p-2 hover:bg-gray-300">
          Create Room
        </button>
      </div>
      {/* </Suspend> */}
    </>
  );
}
