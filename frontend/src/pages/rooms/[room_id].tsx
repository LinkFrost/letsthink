import Head from "next/head";
import { useRouter } from "next/router";
import { useContext, useState, useEffect } from "react";
import { AuthContext } from "../../utils/auth/auth";
import Spinner from "../../components/other/Spinner";
import { PollOptionType, PollOptionColor, SubmissionStatus, MessageType, RoomDataType } from "../../utils/types/types";
import { QueryService, VoteService } from "../../utils/services";
import Checkmark from "../../components/other/Checkmark";
import { pollOptionColors } from "../../utils/pollOptionColors";

export default function RoomPage() {
  const session = useContext(AuthContext);
  const router = useRouter();
  const room_id = router.query.room_id as string;

  const [roomData, setRoomData] = useState<RoomDataType>();
  const [messages, setMessages] = useState<any>([]);
  const [pollOptions, setPollOptions] = useState<PollOptionType[]>([]);
  const [roomLoading, setRoomLoading] = useState(false);
  const [pollVote, setPollVote] = useState<string>("");
  const [pollVoteStatus, pollVoteStatusStatus] = useState<SubmissionStatus>({ color: "", message: "", status: "" });

  useEffect(() => {
    const fetchRoom = async (id: string) => {
      if (id) {
        const res = await fetch(`${QueryService}/query/${id}`, {
          method: "GET",
          credentials: "include",
        });

        const data = (await res.json()) as RoomDataType;

        if (res.ok) {
          setRoomData(data);

          if (data.poll_options) {
            setPollOptions(data.poll_options.sort((a, b) => a.position - b.position));

            if (window.sessionStorage.getItem(data.id)) {
              setPollVote(window.sessionStorage.getItem(data.id) as string);
            }
          }

          if (data.messages) {
            setMessages(data.messages.sort((a, b) => parseInt(a.create_date) - parseInt(b.create_date)));

            // if (window.sessionStorage.getItem(roomData.id)) {
            //   setPollVote(window.sessionStorage.getItem(roomData.id) as string);
            // }
          }
        }
      }
    };

    setRoomLoading(true);
    fetchRoom(room_id);
    setRoomLoading(false);

    setInterval(() => {
      if (document.hasFocus()) {
        fetchRoom(room_id);
      }
    }, 2000);
  }, [room_id]);

  const votePoll = async (id: string) => {
    const res = await fetch(`${VoteService}/polls`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        option_id: id,
        room_id: room_id,
      }),
    });

    const data = await res.json();

    if (data.error) {
      pollVoteStatusStatus({ status: "error", color: "red", message: "Error voting, please try again later." });
    }

    if (res.ok) {
      const { votes } = data;
      let currPollOptions = [...pollOptions];

      currPollOptions = currPollOptions.map((cur) => (cur.id === id ? { ...cur, votes: votes } : cur));

      setPollOptions(currPollOptions);
      setPollVote(id);

      window.sessionStorage.setItem(room_id, id);
    }
  };

  const PollOption = (props: { id: string; title: string; votes: number; position: number }) => {
    const { color, hover, selected } = pollOptionColors[props.position];

    let bgColor;
    let hoverColor;

    if (!pollVote) {
      bgColor = color;
      hoverColor = hover;
    } else {
      bgColor = "bg-gray-300";
      hoverColor = "";
    }

    if (pollVote === props.id) bgColor = selected;

    return (
      <button
        onClick={() => votePoll(props.id)}
        disabled={pollVote !== ""}
        className={`mb-2 box-border w-full max-w-3xl rounded-2xl ${bgColor} ${hoverColor} p-4`}
      >
        <div className="box-border flex flex-row items-center justify-between">
          <div className="flex flex-row items-center gap-2">
            <h1 className="text-3xl font-semibold text-black">{props.title}</h1>
            {pollVote === props.id && <Checkmark></Checkmark>}
          </div>
          {pollVote && <h1 className="text-xl text-black">{props.votes} votes</h1>}
        </div>
      </button>
    );
  };

  const Message = (props: { id: string; content: string; create_date: string }) => {
    return (
      <div>
        <h1>{props.content}</h1>
      </div>
    );
  };

  return (
    <div className="p-8">
      <Head>
        <title>letsthink</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center">
        {!roomData ? (
          <Spinner shade={900} size={6} />
        ) : (
          <div className="flex w-full max-w-2xl flex-col items-center justify-center text-white">
            <h1 className="mb-3 text-6xl text-yellow-500">{roomData.title}</h1>
            <h2 className="mb-3 text-3xl text-white">{roomData.about}</h2>
            <p className={"text-center text-xs text-red-500"}>{pollVoteStatus.message}</p>
            <div className="mt-5 w-full max-w-lg">
              {roomData.room_type == "poll" &&
                pollOptions.map((pollOption: PollOptionType) => (
                  <PollOption
                    key={pollOption.id}
                    id={pollOption.id}
                    title={pollOption.title}
                    votes={pollOption.votes}
                    position={pollOption.position}
                  ></PollOption>
                ))}
              {roomData.room_type == "message" &&
                messages.map((message: MessageType) => (
                  <Message key={message.id} id={message.id} content={message.content} create_date={message.create_date}></Message>
                ))}
            </div>
          </div>
        )}
      </main>
    </div>
  );
}
