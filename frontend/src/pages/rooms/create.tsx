import Head from "next/head";
import { ChangeEvent, useContext, useRef, useState } from "react";
import { AuthContext } from "../../utils/auth/auth";

export default function Create() {
  const session = useContext(AuthContext);

  const title = useRef() as React.MutableRefObject<HTMLInputElement>;
  const [about, setAbout] = useState<string>("");
  const [type, setType] = useState<string>("");
  const [pollOptions, setPollOptions] = useState<{ title: string }[]>([{ title: "" }, { title: "" }]);

  const newPollOption = () => {
    setPollOptions([...pollOptions, { title: "" }]);
  };

  const removePollOption = (index: number) => {
    const options = [...pollOptions];
    options.splice(index, 1);
    setPollOptions(options);
  };

  const changePollOption = (e: ChangeEvent<HTMLInputElement>, index: number) => {
    const options = [...pollOptions];
    options[index].title = e.target.value;
    setPollOptions(options);
  };

  const createRoom = () => {
    const room = {
      user_id: (session.userData as any).id,
      title: title.current.value,
      about: about,
      type: type,
    };

    const poll_options = pollOptions.map((pollOption, index) => {
      return { ...pollOption, position: index + 1 };
    });

    console.log("Room: ", room);

    if (type === "poll") console.log("Poll Options: ", poll_options);
  };

  return (
    <div className="p-8">
      <Head>
        <title>Create Room - letsthink</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center justify-center">
        <div className="flex  max-w-2xl flex-col justify-center text-white">
          <h1 className="mb-3 text-4xl text-yellow-500">Create Room</h1>

          <form className="flex flex-col items-start gap-1" autoComplete="off">
            <label htmlFor="name">
              <p className="text-lg">Title:</p>
            </label>
            <input id="name" className="rounded-md px-2 py-[0.125rem] text-black" ref={title} type="text" placeholder="Name of the room"></input>

            <label htmlFor="about">
              <p className="text-lg ">About:</p>
            </label>
            <textarea
              onChange={(e) => setAbout(e.target.value)}
              id="about"
              rows={4}
              className="w-96 rounded-md px-2 py-[0.125rem] text-black"
              placeholder="What the room is all about"
              value={about}
            ></textarea>

            <div className="flex items-center gap-2">
              <label>
                <p className="text-lg ">Type:</p>
              </label>
              <div className="flex gap-4">
                <div className="flex gap-2">
                  <input onChange={(e) => setType(e.target.value)} type="radio" id="messages" name="type" value="message"></input>
                  <label htmlFor="messages">
                    <p className="text-md">Messages</p>
                  </label>
                </div>
                <div className="flex gap-2">
                  <input onChange={(e) => setType(e.target.value)} type="radio" id="polls" name="type" value="poll"></input>
                  <label htmlFor="polls">
                    <p className="text-md">Poll</p>
                  </label>
                </div>
              </div>
            </div>

            {type == "poll" && (
              <div className="mt-5 flex flex-col gap-2">
                {pollOptions.map((pollOption, index) => {
                  const placeholder = `Option ${index + 1}`;

                  return (
                    <div key={index}>
                      <div className="flex gap-2">
                        <input
                          onChange={(e) => changePollOption(e, index)}
                          id="index"
                          className="w-40 rounded-md px-2 py-[0.125rem] text-black"
                          type="text"
                          placeholder={placeholder}
                          value={pollOption.title}
                        ></input>
                        {index > 1 && (
                          <button
                            onClick={() => removePollOption(index)}
                            className="flex justify-center rounded-full bg-red-400 px-4 font-bold text-white hover:bg-red-300"
                            type="button"
                          >
                            -
                          </button>
                        )}
                      </div>
                      {pollOptions.length < 10 && index == pollOptions.length - 1 && (
                        <div className="mt-2">
                          <button onClick={newPollOption} className="flex rounded-full bg-blue-400 px-4 font-bold text-white hover:bg-blue-300">
                            +
                          </button>
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </form>

          <button onClick={createRoom} className="w-30 ml-auto mt-5 flex justify-center rounded-xl bg-yellow-400 p-2 text-lg text-black hover:bg-yellow-200">
            Create
          </button>
        </div>
      </main>
    </div>
  );
}
