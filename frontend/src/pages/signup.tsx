import { FormEvent, useState, ChangeEvent } from "react";
import Head from "next/head";
import Spinner from "../components/other/Spinner";
import { z } from "zod";
import { UsersService } from "../utils/services";
import { useRouter } from "next/router";
import Link from "next/link";
import { SubmissionStatus } from "../utils/types/types";

type FormFields = "email" | "username" | "password" | "confirmPassword";
type FormType = Record<FormFields, string>;
type FormError = Record<FormFields, string> | undefined;

const customErrorMap: z.ZodErrorMap = (issue, ctx) => {
  if (issue.code === z.ZodIssueCode.too_small) {
    return { message: `${issue.path[0]} must be at least ${issue.minimum} characters` };
  }
  if (issue.code === z.ZodIssueCode.custom) {
    return { message: `less-than-${(issue.params || {}).minimum}` };
  }
  return { message: ctx.defaultError };
};

z.setErrorMap(customErrorMap);

const defaultForm: FormType = {
  email: "",
  username: "",
  password: "",
  confirmPassword: "",
};

const validateForm = (form: FormType): FormError => {
  try {
    // parse sign up form
    z.object({
      email: z.string().email(),
      username: z.string().min(3).max(20),
      password: z.string().min(3).max(20),
      confirmPassword: z.string().min(3).max(20),
    })
      .superRefine(({ confirmPassword, password }, ctx) => {
        if (confirmPassword !== password) {
          ctx.addIssue({
            code: z.ZodIssueCode.custom,
            message: "the passwords do not match",
            path: ["confirmPassword"],
          });
        }
      })
      .parse(form);

    return undefined;
  } catch (errors) {
    // turn zod issues array into <form field = error message> object
    if (errors instanceof z.ZodError) {
      return errors.issues.reduce((acc, issue) => {
        return {
          ...acc,
          [issue.path[0]]: issue.message ?? "",
        };
      }, {}) as FormError;
    }
    return undefined;
  }
};

export default function SignUp<NextPage>() {
  const router = useRouter();

  const [form, setForm] = useState<FormType>({ ...defaultForm });
  const [formErrors, setFormErrors] = useState({ ...defaultForm });
  const [submissionStatus, setSubmissionStatus] = useState<SubmissionStatus>({ color: "", message: "", status: "" });
  const [signUpLoading, setSignUpLoading] = useState(false);

  const handleFormChange = (e: ChangeEvent<HTMLInputElement>, field: FormFields) => setForm({ ...form, [field]: e.target.value });

  const handleSubmit = async (e: FormEvent<HTMLButtonElement>) => {
    e.preventDefault();

    // Validate Login Form and Set Errors
    const errors = validateForm(form);
    if (errors) {
      setFormErrors({ ...defaultForm, ...errors });
      return;
    }

    setFormErrors({ ...defaultForm });

    // send request
    setSignUpLoading(true);
    const res = await fetch(`${UsersService}/users`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        email: form.email,
        username: form.username,
        password: form.password,
      }),
    });

    setSignUpLoading(false);

    if (!res.ok) {
      if (res.status === 403) {
        setSubmissionStatus({ status: "error", color: "red", message: "Username or email already taken" });
      }
      return;
    }

    setSubmissionStatus({ status: "success", color: "emerald", message: "Successfully signed up! Redirecting to login." });

    setForm({ ...defaultForm });

    setTimeout(() => {
      router.replace("/login");
    }, 2500);
  };

  return (
    <>
      <Head>
        <title>letsthink</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mt-5 flex h-full flex-col items-center justify-center">
        <h1 className="mb-5 text-2xl font-semibold text-white">Sign Up</h1>
        <form className="flex h-full flex-col gap-1">
          {/* EMAIL */}
          <label className="text-lg text-white" htmlFor="email">
            Email:
          </label>
          <input
            value={form.email}
            onChange={(e) => handleFormChange(e, "email")}
            id="email"
            className="rounded-md px-2 py-[0.125rem] text-black"
            type="text"
          ></input>
          <p className="text-xs text-red-400">{formErrors.email}</p>

          {/* USERNAME */}
          <label className="text-lg text-white" htmlFor="email">
            Username:
          </label>
          <input
            value={form.username}
            onChange={(e) => handleFormChange(e, "username")}
            id="email"
            className="mb-5 rounded-md px-2 py-[0.125rem] text-black"
            type="text"
          ></input>
          <p className="text-xs text-red-400">{formErrors.username}</p>

          {/* PASSWORD */}
          <label className="text-lg text-white" htmlFor="email">
            Password:
          </label>
          <input
            value={form.password}
            onChange={(e) => handleFormChange(e, "password")}
            id="password"
            className="rounded-md px-2 py-[0.125rem] text-black"
            type="password"
          ></input>
          <p className="text-xs text-red-400">{formErrors.password}</p>

          {/* CONFIRM PASSWORD */}
          <label className="text-lg text-white" htmlFor="email">
            Confirm Password:
          </label>
          <input
            value={form.confirmPassword}
            onChange={(e) => handleFormChange(e, "confirmPassword")}
            id="password"
            className="rounded-md px-2 py-[0.125rem] text-black"
            type="password"
          ></input>
          <p className="text-xs text-red-400">{formErrors.confirmPassword}</p>

          <button
            disabled={signUpLoading}
            onClick={(e) => handleSubmit(e)}
            className="ml-auto mt-5 flex justify-center rounded-xl bg-white p-2 px-4 text-center hover:bg-gray-300 disabled:bg-gray-50"
          >
            {signUpLoading ? <Spinner shade={900} size={6} /> : "Sign Up"}
          </button>
          <p className={"pt-2 text-center text-xs text-blue-500"}>{submissionStatus.message}</p>
          <p className="py-2 text-sm text-gray-300">
            {"Already have an account? "}
            <Link href="/login" className="font-semibold hover:underline">
              Login Here
            </Link>
          </p>
        </form>
      </div>
    </>
  );
}
